# Introduction {.vertical-center}

## Clothes don't make the man

```{r}
dracula_card(
  borderColor = "red",
  outline = TRUE,
  class = "drac-mt-lg",
  dracula_p(
    "Your app may be as beautiful and as cool as you want, it is useless if it does not start/run."
  )
)
```

## From prototype to production

How do we transition‚ùì

:::: {.columns}

::: {.column width="33%"}
```{r}
dracula_card(
  outline = TRUE,
  dracula_p(
    dracula_text(
      "Reliable", 
      color = "purple",
      weight = "bold"
    ), 
    ": is the app doing what it is intended to do?"
  )
)
```
:::

::: {.column width="33%"}
```{r}
dracula_card(
  outline = TRUE,
  borderColor = "orange",
  dracula_p(
    dracula_text(
      "Stable", 
      color = "orange",
      weight = "bold"
    ), 
    ": how often does it crash?"
  )
)
```
:::

::: {.column width="33%"}
```{r}
dracula_card(
  outline = TRUE,
  borderColor = "green",
  dracula_p(
    dracula_text(
      "Available", 
      color = "green",
      weight = "bold"
    ), 
    ": is the app fast enough to handle multiple concurrent users?"
  )
)
```
:::

::::

In practice, a few apps meet all these requirements üòà. 

## Available tools

::: {.panel-tabset}

### Structure your app

<img src="assets/images/svg/golem.svg" width="10%" style="display: block; margin: auto;" class="svg-img"/>

- Easier checking, linting, documentation and testing.
- Just ... __easier__. üòÄ

### __dependencies__

<img src="assets/images/svg/renv.svg" width="10%" style="display: block; margin: auto;" class="svg-img"/>

- Fix package versions.
- Increased __reproducibility__.

### __Test__ code

<img src="assets/images/svg/testthat.svg" width="10%" style="display: block; margin: auto;" class="svg-img"/>

- Unit tests: test business logic. 
- Server testing: test how Shiny modules or pieces work together (with reactivity).
- UI testing: test UI components, snapshots, headless-testing (`{shinytest2}`).

### Optimize
Are there bottlenecks?

- __Load__ testing: How does the app behave with 10 simultaneous user? `{shinyloadtest}`.
- __Profiling__: What part of my app is slow?`{profvis}`.
- Reactivity: Are there any reactivity issues? <img src="assets/images/svg/reactlog.svg" width="10%" style="display: inline; margin: auto;" class="svg-img"/>.

:::

## Automate: CI/CD

::: {.panel-tabset}
### What

- Continuous integration: automatically __check__ new features. üè•
- Continuous deployment: automatically __deploy__ content. ‚úâÔ∏è
- Running on a __remote__ environment ‚òÅÔ∏è:
  - [Github Actions](https://github.com/features/actions).
  - [Jenkins](https://www.jenkins.io/).
  - [Gitlab CI/CD](https://docs.gitlab.com/ee/ci/).

### Benefits

- __Automated__.
- More __reproducible__ (more os/R flavors available).
- __Time saver__.
- Less duplication.

### How? 
Not easy üò¢

- Select __DevOps__ platform (GitLab, GitHub, ...).
- Add __version control__ (git knowledge).
- Build custom GitLab runner (optional).
- Write __CI/CD instructions__ (better support for GitHub).
- Enjoy ...

Can't we make things easier‚ùì

:::

## Stop ... I am lost ...

<img src="assets/images/svg/sad.svg" width="40%" style="display: block; margin: auto;" class="svg-img"/>

- There are just so many tools! How to use them properly?
- Is there a way to __automate__ all of this? I just don't have time ... üòû

## Welcome {shinyValidator}

- Integrate all previous mentioned tools.
- Produces a single HTML report output.
- Flexible.