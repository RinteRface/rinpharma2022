# Setup {shinyValidator}

## {golem} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
path <- file.path(tempdir(), "mypkg") 
golem::create_golem(path)
# ...
```

## {golem} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
path <- file.path(tempdir(), "mypkg") 
golem::create_golem(path)
usethis::use_mit_license() # or whatever license
usethis::use_testthat()
usethis::use_test("dummy")
usethis::use_git()
usethis::use_github() # make sure to have a valid GITHUB_PAT
# ...
```

## {renv} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")
```

## {renv} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")

# SCAN the project and look for dependencies
renv::init()
# install missing packages
renv::install("<PACKAGE>")
# Capture new dependencies after package installation
renv::snapshot()
```

## Install {shinyValidator}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
devtools::install_github("Novartis/shinyValidator")
library(shinyValidator)
# At the root of your R package
use_validator("github")
devtools::document() # update help
renv::snapshot()
```

# {shinyValidator}: step by step

## Overall concept

```{mermaid}
%%{init: {'theme':'dark'}}%%
graph TD
  A(Shiny Project) --> B(DMC App)
  A --> C(Poof of concept App POC)
  B --> |strict| D[Expectations]
  C --> |low| D
  D --> |DMC| F
  D --> |POC| H
  F --> |create| J(Global HTML report)
  H --> J
  J --> |deploy| K(Deployment server)
  subgraph DMC CI/CD pipeline
    direction LR
    E[Lint]
    F[Quality/crash tests]
    G[Performance tests]
  end
  subgraph POC CI/CD pipeline
    direction LR
    H[Lint]
    I[Quality/crash tests]
  end
  click A callback "Tooltip for a callback"
  click B callback "DMC: data monitoring committee"
  click D callback "Apps have different expectations"
  click E callback "Lint code: check code formatting, style, ..."
  click F callback "Run R CMD check + headless crash test (shinytest2)"
  click G callback "Optional tests: profiling, load test, ..."
  click J callback "HTML reports with multiple tabs"
  click K callback "RStudio Connect, GitLab/GitHub pages, ..."
```

## Report example

<iframe src="./assets/shinyvalidator-report/index.html"
title="shinyValidator html report" width="100%" height="100%">
</iframe>

## GitLab/GitHub

![shinyValidator on GitLab CI](assets/images/png/gitlab-pipeline.png)


## CI/CD file: branches

In case you need to control branches triggering `{shinyValidator}`:

:::: {.columns}

::: {.column width="50%"}
```yaml
on:
  push:
    branches: [main, master, <CUSTOM_BRANCH>]
  pull_request:
    branches: [main, master, <CUSTOM_BRANCH>]

name: shinyValidator
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
gitGraph
  commit
  commit
  branch develop
  checkout develop
  commit
  commit
  checkout main
  merge develop
  commit
  commit id: "Normal" tag: "v1.0.0"
```
:::

::::

## CI/CD file: strategy 

If you have to change the R version, os, ...:

```yaml
strategy:
  fail-fast: false
  matrix:
    config:
      - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
      - {os: ubuntu-latest,   r: 'release'}
      - {os: ubuntu-latest,   r: 'oldrel-1'}
```

## CI/CD file: steps {auto-animate=true}

Code is first linted:

```yaml
- name: Lint code
  shell: Rscript {0}
  run: shinyValidator::lint_code()
```

## CI/CD file: steps {auto-animate=true}

The app undergo a series of validations:

```yaml
- name: Lint code
  shell: Rscript {0}
  run: shinyValidator::lint_code()

- name: Audit app üè•
  shell: Rscript {0}
  run: shinyValidator::audit_app()
```

## CI/CD file: steps {auto-animate=true}

The report is deployed to GitHub pages:

```yaml
- name: Lint code
  shell: Rscript {0}
  run: shinyValidator::lint_code()

- name: Audit app üè•
  shell: Rscript {0}
  run: shinyValidator::audit_app()

- name: Deploy to GitHub pages üöÄ
  if: github.event_name != 'pull_request'
  uses: JamesIves/github-pages-deploy-action@4.1.4
  with:
    clean: false
    branch: gh-pages
    folder: public
```

## Audit app

`audit_app()` is the main function:

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  headless_actions = NULL,
  timeout = NULL,
  workers = 5,
  scope = c("manual", "DMC", "POC"),
  output_validation = FALSE,
  coverage = TRUE,
  load_testing = TRUE,
  profile_code = TRUE,
  check_reactivity = TRUE,
  flow = FALSE,
  debug = FALSE,
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
- __headless actions__: pass `{shinytest2}` instructions.
- __timeout__: wait app to start.
- __...__: parameters to pass to `run_app()` such as database logins, ...
- __scope__: predefined set of parameters (see examples).
:::

::::

## Audit app: example

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  profile_code = FALSE,
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph TD
  A(Check) --> B(Crashtest)
  B --> C(Loadtest)
  C --> D(Coverage)
  D --> E(Reactivity)
  click A callback "devtools::check"
  click B callback "{shinytest2}"
  click C callback "{shinyloadtest}"
  click D callback "{covr}"
  click E callback "{reactlog}"
```
:::

::::


## Audit app: using scope parameter

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  scope = "POC",
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph LR
  A(Check) --> B(Crashtest)
```
:::

::::