# Setup {shinyValidator}

## {golem} {auto-animate=true}

We create an empty `{golem}` project:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "mypkg") 
golem::create_golem(path)
# ...
```

## {golem} {auto-animate=true}

We add some useful files, basic test and
 link to git:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "mypkg") 
golem::create_golem(path)
usethis::use_mit_license() # or whatever license
usethis::use_testthat()
usethis::use_test("dummy")
usethis::use_git()
usethis::use_github() # make sure to have a valid GITHUB_PAT
# ...
```

## {renv} {auto-animate=true}

Initialize `{renv}` for R package dependencies:

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")
```

## {renv} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")

# SCAN the project and look for dependencies
renv::init()
# install missing packages
renv::install("<PACKAGE>")
# Capture new dependencies after package installation
renv::snapshot()
```

## Install {shinyValidator}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
devtools::install_github("Novartis/shinyValidator")
library(shinyValidator)
# At the root of your R package
use_validator("github")
devtools::document() # update help
renv::snapshot()
```

# {shinyValidator}: step by step

## Overall concept

```{mermaid}
%%{init: {'theme':'dark'}}%%
flowchart TD
  subgraph CICD
    direction TB
    subgraph DMC 
      direction LR
      E[Lint] --> F[Quality]
      F --> G[Performance]
    end
    subgraph POC 
      direction LR
      H[Lint] --> I[Quality]
    end
  end
  A(Shiny Project) --> B(DMC App)
  A --> C(Poof of concept App POC)
  B --> |strict| D[Expectations]
  C --> |low| D
  D --> CICD 
  CICD --> |create| J(Global HTML report)
  J --> |deploy| K(Deployment server)
  click A callback "Tooltip for a callback"
  click B callback "DMC: data monitoring committee"
  click D callback "Apps have different expectations"
  click E callback "Lint code: check code formatting, style, ..."
  click F callback "Run R CMD check + headless crash test (shinytest2)"
  click G callback "Optional tests: profiling, load test, ..."
  click J callback "HTML reports with multiple tabs"
  click K callback "RStudio Connect, GitLab/GitHub pages, ..."
```

## CI/CD

::: {.panel-tabset}

### Control branches

In case you need to control branches triggering `{shinyValidator}`:

:::: {.columns}

::: {.column width="50%"}
```yaml
on:
  push:
    branches: [main, master, <CUSTOM_BRANCH>]
  pull_request:
    branches: [main, master, <CUSTOM_BRANCH>]

name: shinyValidator
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
gitGraph
  commit
  commit
  branch develop
  checkout develop
  commit
  commit
  checkout main
  merge develop
  commit
  commit id: "Normal" tag: "v1.0.0"
```
:::

::::

### Control strategy 

If you have to change the R version, os, ...:

```yaml
strategy:
  fail-fast: false
  matrix:
    config:
      - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
      - {os: ubuntu-latest,   r: 'release'}
      - {os: ubuntu-latest,   r: 'oldrel-1'}
```


### Steps

```yaml
- name: Lint code
  shell: Rscript {0}
  run: shinyValidator::lint_code()

- name: Audit app üè•
  shell: Rscript {0}
  run: shinyValidator::audit_app()

- name: Deploy to GitHub pages üöÄ
  if: github.event_name != 'pull_request'
  uses: JamesIves/github-pages-deploy-action@4.1.4
  with:
    clean: false
    branch: gh-pages
    folder: public
```

:::

## Audit app

`audit_app()` is the main function:

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  headless_actions = NULL,
  timeout = NULL,
  workers = 5,
  scope = c("manual", "DMC", "POC"),
  output_validation = FALSE,
  coverage = TRUE,
  load_testing = TRUE,
  profile_code = TRUE,
  check_reactivity = TRUE,
  flow = FALSE,
  debug = FALSE,
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
- __headless actions__: pass `{shinytest2}` instructions.
- __timeout__: wait app to start.
- __...__: parameters to pass to `run_app()` such as database logins, ...
- __scope__: predefined set of parameters (see examples).
:::

::::

## Audit app: example

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  profile_code = FALSE,
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph TD
  A(Check) --> B(Crashtest)
  B --> C(Loadtest)
  C --> D(Coverage)
  D --> E(Reactivity)
  click A callback "devtools::check"
  click B callback "{shinytest2}"
  click C callback "{shinyloadtest}"
  click D callback "{covr}"
  click E callback "{reactlog}"
```
:::

::::


## Audit app: using scope parameter

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  scope = "POC",
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph LR
  A(Check) --> B(Crashtest)
```
:::

::::

## Audit app: headless manipulation

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
# Path is an internal parameter you don't need to change. 
# app refers to the headless app instance.
custom_horde <- {
  app$set_inputs(obs = 30)
  app$get_screenshot(file.path(path, "plop.png"))
  # ... pass any other commands from shinytest2 API
}
```
:::

::: {.column width="50%"}
<img src="assets/images/svg/shinytest2.svg" width="20%" style="display: block; margin: auto;" class="svg-img"/>
:::

::::

## About monkey testing

`run_crash_test()` runs a `gremlins.js` [test](https://marmelab.com/gremlins.js/) if no 
headless action are passed:

<center>{{< video assets/video/monkey-test.mp4
    title="Monkey testing for Shiny app" height= "400px" >}}</center>

## Report example

<iframe src="./assets/shinyvalidator-report/index.html"
title="shinyValidator html report" width="100%" height="100%">
</iframe>

## GitLab/GitHub

![shinyValidator on GitLab CI](assets/images/png/gitlab-pipeline.png)

## Run our first pipeline

1. Make sure GitHub [Pages](https://github.com/DivadNojnarg/RtmpXU8dBM/settings/pages) is enabled.
2. Commit and push the code to GitHub.
3. You can follow the GitHub actions logs.
4. When done, open the report an discuss results.
5. Time to add some real things!