# Setup {shinyValidator}

## {golem} {auto-animate=true}

We create an empty `{golem}` project:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "mypkg") 
golem::create_golem(path)
# ...
```

## {golem} {auto-animate=true}

We add some useful files, basic test and
 link to git:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "mypkg") 
golem::create_golem(path)
usethis::use_mit_license() # or whatever license
usethis::use_testthat()
usethis::use_test("dummy")
usethis::use_git()
```

## {renv} {auto-animate=true}

Initialize `{renv}` for R package dependencies:

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")
```

## {renv} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")

# SCAN the project and look for dependencies
renv::init()
# install missing packages
renv::install("<PACKAGE>")
# Capture new dependencies after package installation
renv::snapshot()
```

## Install {shinyValidator}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
devtools::install_github("Novartis/shinyValidator")
library(shinyValidator)
# At the root of your R package
use_validator("github")
devtools::document() # update help
renv::snapshot()
```

# {shinyValidator}: step by step

## Overall concept

```{mermaid}
%%{init: {'theme':'dark'}}%%
flowchart TD
  subgraph CICD
    direction TB
    subgraph DMC 
      direction LR
      E[Lint] --> F[Quality]
      F --> G[Performance]
    end
    subgraph POC 
      direction LR
      H[Lint] --> I[Quality]
    end
  end
  A(Shiny Project) --> B(DMC App)
  A --> C(Poof of concept App POC)
  B --> |strict| D[Expectations]
  C --> |low| D
  D --> CICD 
  CICD --> |create| J(Global HTML report)
  J --> |deploy| K(Deployment server)
  click A callback "Tooltip for a callback"
  click B callback "DMC: data monitoring committee"
  click D callback "Apps have different expectations"
  click E callback "Lint code: check code formatting, style, ..."
  click F callback "Run R CMD check + headless crash test (shinytest2)"
  click G callback "Optional tests: profiling, load test, ..."
  click J callback "HTML reports with multiple tabs"
  click K callback "RStudio Connect, GitLab/GitHub pages, ..."
```

## Audit app

`audit_app()` is the main function ^[also works locally without CI/CD, assuming you have chrome/chromium and shinycannon installed]:

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  headless_actions = NULL,
  timeout = NULL,
  workers = 5,
  scope = c("manual", "DMC", "POC"),
  output_validation = FALSE,
  coverage = TRUE,
  load_testing = TRUE,
  profile_code = TRUE,
  check_reactivity = TRUE,
  flow = FALSE,
  debug = FALSE,
  port = httpuv::randomPort(),
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
- __headless actions__: pass `{shinytest2}` instructions.
- __timeout__: wait app to start.
- __...__: parameters to pass to `run_app()` such as database logins, ...
- __scope__: predefined set of parameters (see examples).
:::

::::

## Audit app: example

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app(profile_code = FALSE, ...) 
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph TD
  A(Check) --> B(Crashtest)
  B --> C(Loadtest)
  C --> D(Coverage)
  D --> E(Reactivity)
  click A callback "devtools::check"
  click B callback "{shinytest2}"
  click C callback "{shinyloadtest}"
  click D callback "{covr}"
  click E callback "{reactlog}"
```
:::

::::


## Audit app: using scope parameter

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app(scope = "POC", ...)
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph LR
  A(Check) --> B(Crashtest)
```
:::

::::

## Audit app: headless manipulation

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
# app refers to the headless app instance.
audit_app({
  app$set_inputs(obs = 30)
  app$get_screenshot("plop.png")
  # ... pass any other commands from shinytest2 API
})
```
:::

::: {.column width="50%"}
<img src="assets/images/svg/shinytest2.svg" width="20%" style="display: block; margin: auto;" class="svg-img"/>
:::

::::

## About monkey testing

`run_crash_test()` runs a `gremlins.js` [test](https://marmelab.com/gremlins.js/) if no 
headless action are passed:

<center>{{< video assets/video/monkey-test.mp4
    title="Monkey testing for Shiny app" height= "400px" >}}</center>

## Report example

<iframe src="./assets/shinyvalidator-report/index.html"
title="shinyValidator html report" width="100%" height="100%">
</iframe>

## Your turn

1. Call `run_audit(scope = "POC")`.
2. Look at the logs messages.
3. When done open `public/index.html` (external browser).
4. Explore the report. 
5. Modify app code and rerun ...