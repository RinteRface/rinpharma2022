# Setup {shinyValidator} {.vertical-center}

## {golem} {auto-animate=true}

We create an empty `{golem}` project^[You'll replace `<PKG>` by whatever suitable.]:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "<PKG>") 
golem::create_golem(path)
# ...
```

## {golem} {auto-animate=true}

We add some useful files, basic test and
 link to git:

```{r}
#| eval: false
#| echo: true
path <- file.path("<FOLDER>", "<PKG>") 
golem::create_golem(path)
usethis::use_mit_license() # or whatever license
usethis::use_testthat()
usethis::use_test("dummy")
usethis::use_git()
```

## Put some real server code

:::: {.columns}

::: {.column width="50%"}
Copy this into `app_server.R`:

```{r}
#| eval: false
#| echo: true
output$distPlot <- renderPlot({
  hist(rnorm(input$obs))
})
```
:::

::: {.column width="50%"}
Copy this into `app_ui.R`:

```{r}
#| eval: false
#| echo: true
fluidPage(
  sliderInput(
    "obs",
    "Number of observations:",
    min = 0,
    max = 1000,
    value = 500
  ),
  plotOutput("distPlot")
)
```
:::

::::


## Create empty GitHub repo

Browse to [GitHub](https://github.com/) and create an empty repository called `<PKG>` matching the previously created package. 

## Add remote repo to local

![](assets/images/png/init-github.png){fig-alt="How to init a GitHub repository."}

Go to terminal tab under RStudio:

```shell
git remote add origin <LINK COPIED FROM GITHUB>
git branch -M main
git push -u origin main
```

## {renv} {auto-animate=true}

Initialize `{renv}` for R package dependencies:

```{r}
#| eval: false
#| echo: true
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")
```

```{r}
dracula_card(
  borderColor = "red",
  outline = TRUE,
  dracula_text(
    color = "red",
    weight = "bold",
    size = "lg",
    "Restart R to consider .Renviron"
  )
)
```

## {renv} {auto-animate=true}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|4|6|8"
system("echo 'RENV_PATHS_LIBRARY_ROOT = ~/.renv/library' >> .Renviron")

# SCAN the project and look for dependencies
renv::init()
# install missing packages
renv::install("<PACKAGE>")
# Capture new dependencies after package installation
renv::snapshot()
```

![](assets/images/png/renv-init.png){fig-alt="Code output showing successful renv setup."}

## Install {shinyValidator}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
devtools::install_github("Novartis/shinyValidator")
library(shinyValidator)
# At the root of your R package
use_validator("github")
devtools::document() # update help
renv::snapshot()
```

Review the file structure

# {shinyValidator}: step by step

## Overall concept

```{mermaid}
%%{init: {'theme':'dark'}}%%
flowchart TD
  subgraph CICD
    direction TB
    subgraph DMC 
      direction LR
      E[Lint] --> F[Quality]
      F --> G[Performance]
    end
    subgraph POC 
      direction LR
      H[Lint] --> I[Quality]
    end
  end
  A(Shiny Project) --> B(DMC App)
  A --> C(Poof of concept App POC)
  B --> |strict| D[Expectations]
  C --> |low| D
  D --> CICD 
  CICD --> |create| J(Global HTML report)
  J --> |deploy| K(Deployment server)
  click A callback "Tooltip for a callback"
  click B callback "DMC: data monitoring committee"
  click D callback "Apps have different expectations"
  click E callback "Lint code: check code formatting, style, ..."
  click F callback "Run R CMD check + headless crash test (shinytest2)"
  click G callback "Optional tests: profiling, load test, ..."
  click J callback "HTML reports with multiple tabs"
  click K callback "RStudio Connect, GitLab/GitHub pages, ..."
```

## Audit app

`audit_app()` is the main function ^[also works locally without CI/CD, assuming you have chrome/chromium and shinycannon installed]:

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app <- function(
  headless_actions = NULL,
  timeout = NULL,
  scope = c("manual", "DMC", "POC"),
  output_validation = FALSE,
  coverage = TRUE,
  load_testing = TRUE,
  profile_code = TRUE,
  check_reactivity = TRUE,
  ...
) {
  ###
}
```
:::

::: {.column width="50%"}
- __headless actions__: pass `{shinytest2}` instructions.
- __timeout__: wait app to start.
- __...__: parameters to pass to `run_app()` such as database logins, ...
- __scope__: predefined set of parameters (see examples).
:::

::::

## Audit app: example

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app(profile_code = FALSE, ...) 
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph TD
  A(Check) --> B(Crashtest)
  B --> C(Loadtest)
  C --> D(Coverage)
  D --> E(Reactivity)
  click A callback "devtools::check"
  click B callback "{shinytest2}"
  click C callback "{shinyloadtest}"
  click D callback "{covr}"
  click E callback "{reactlog}"
```
:::

::::


## Audit app: using scope parameter

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
audit_app(scope = "POC", ...)
```
:::

::: {.column width="50%"}
```{mermaid}
%%{init: {'theme':'dark'}}%%
graph LR
  A(Check) --> B(Crashtest)
```
:::

::::

## Audit app: headless manipulation (1/2)

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
# app refers to the headless app instance.
audit_app({
  app$set_inputs(obs = 30)
  app$get_screenshot("plop.png")
  # ... pass any other commands from shinytest2 API
})
```
:::

::: {.column width="50%"}
<img src="assets/images/svg/shinytest2.svg" width="20%" style="display: block; margin: auto;" class="svg-img" alt="shinytest2 hex logo."/>
:::

::::

This code is run during crash test, profiling and reactivity check.

## Headless manipulation: your turn üéÆ (2/2)

:::: {.columns}

::: {.column width="50%" .xsmall}

Run the following code step by step^[Notice the app blocks the main R process but you could run it in
the background with `{callr}`, what `{shinyValidator}` is doing.]: 

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3|5|6|19"
# Start the app 
library(shinytest2)
headless_app <- AppDriver$new("./app.R")
# View the app for debugging (does not work from Workbench!)
headless_app$view()
headless_app$set_inputs(obs = 1)
headless_app$get_value(input = "obs")
# You can also run JS code!
headless_app$run_js(
  "$('#obs')
    .data('shiny-input-binding')
    .setValue(
      $('#obs'), 
      100
    );
  "
)
# Now you can call any function
# Close the connection before leaving 
headless_app$stop()
```
:::

::: {.column width="50%"}
![](assets/images/png/headless-test-debug.png){fig-alt="Headless test debugging tools."}
:::

::::

## About monkey testing (1/2)

`run_crash_test()` runs a `gremlins.js` [test](https://marmelab.com/gremlins.js/) if no 
headless action are passed:

<center>{{< video assets/video/monkey-test.mp4
    title="Monkey testing for Shiny app" height= "400px" >}}
</center>

## About monkey testing (2/2)

### Your turn üë©‚Äçüî¨
:::: {.columns}

::: {.column width="50%" .xsmall}
1. Run `./app.R` in an external browser.
2. Open the developer tools (ctrl + shift (Maj) + I for Windows, option + command + I on Mac).
3. Browse to https://marmelab.com/gremlins.js/ and copy the Bookmarklet Code on the right.
4. Copy this code into the Shiny app HTML inspector JS console.
5. Enjoy that moment.
:::

::: {.column width="50%"}
![](assets/images/png/monkey-test.png){fig-alt="Monkey test screnshot."}
:::

::::


## Report example

<iframe src="./assets/shinyvalidator-report/index.html"
title="shinyValidator html report" width="100%" height="100%">
</iframe>

## Your turn üéÆ

1. From the R console, call `shinyValidator::audit_app(scope = "POC")`.
2. Look at the logs messages.
3. When done open `public/index.html` (external browser).
4. Explore the report. 
5. Modify app code and rerun ...